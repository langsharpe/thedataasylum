<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Data Asylum]]></title>
  <link href="http://thedataasylum.com/atom.xml" rel="self"/>
  <link href="http://thedataasylum.com/"/>
  <updated>2012-04-25T21:28:59+10:00</updated>
  <id>http://thedataasylum.com/</id>
  <author>
    <name><![CDATA[Lang Sharpe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What I learned about IE7 text-shadows and opacity]]></title>
    <link href="http://thedataasylum.com/articles/what-i-learned-about-ie7-text-shadow-and-opacity.html"/>
    <updated>2011-10-05T00:00:00+10:00</updated>
    <id>http://thedataasylum.com/articles/what-i-learned-about-ie7-text-shadow-and-opacity</id>
    <content type="html"><![CDATA[<ul>
<li>Yes you can have reasonably good text-shadows.

<ul>
<li>But only on a <a href="http://www.useragentman.com/blog/2011/04/14/css3-text-shadow-can-it-be-done-in-ie-without-javascript/">solid color background</a>.</li>
</ul>
</li>
<li>Yes you can fadeIn and fadeOut text.

<ul>
<li>But only on a <a href="http://stackoverflow.com/questions/3247333/jquery-fadein-text-in-ie7-ie8-text-aliased-during-animation">solid color background</a>.</li>
</ul>
</li>
<li>Yes you can even fadeIn and fadeOut transparent PNGS.

<ul>
<li>But only once you&#8217;ve applied a <a href="http://www.sitepoint.com/forums/showthread.php?590295-jQuery-fadein-fadeout-of-transparent-png-in-IE7-and-Chrome&amp;s=76c69f65b9eeab5322be704d23c92795&amp;p=4722567&amp;viewfull=1#post4722567">transparent background</a>. Even then it looks a bit awful.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Css margin and padding shorthand]]></title>
    <link href="http://thedataasylum.com/articles/css-margin-and-padding-shorthand.html"/>
    <updated>2011-10-01T00:00:00+10:00</updated>
    <id>http://thedataasylum.com/articles/css-margin-and-padding-shorthand</id>
    <content type="html"><![CDATA[<p>Css provides short hand properties for margin and padding which let you define multiple properties at once. For example:-</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">p</span> <span class="p">{</span>
</span><span class='line'>  <span class="c">/* Shorthand */</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">20px</span> <span class="m">5px</span> <span class="m">5px</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">/* The Long Equivalent */</span>
</span><span class='line'>  <span class="k">margin-top</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-right</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-left</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="right" src="http://thedataasylum.com/images/posts/MarginAndPaddingShorthand.png" title="Diagram of clockwise box" ></p>

<p>There are four variations of the shorthand property. You can specify 1, 2, 3 or 4 values, which are applied to the top, bottom, left and right margins. The problem that I had was trying to determine which value is applied to which side, especially if there are 2 or 3 values. There is an easy way to remember however.</p>


<p>
<strong>Start at the top and go clockwise. If you run out of values, use the value already set for that axis.</strong>
</p>


<p>
So for example&#8230;
</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">p</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">20px</span>   <span class="m">5px</span>      <span class="m">5px</span>       <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="c">/*      top -&gt; right -&gt; bottom -&gt; left    */</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">20px</span>   <span class="m">5px</span>      <span class="m">5px</span><span class="p">;</span>
</span><span class='line'>  <span class="c">/*      top -&gt; right -&gt; bottom</span>
</span><span class='line'><span class="c">                 left                       */</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">20px</span>   <span class="m">5px</span><span class="p">;</span>
</span><span class='line'>  <span class="c">/*      top -&gt; right</span>
</span><span class='line'><span class="c">          bottom left                       */</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">/* the expection is for a single value. This applies to all sides. */</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>  <span class="c">/*      all (top, right, bottom and left) */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Rails, Nginx and X-Accel-Redirect work together]]></title>
    <link href="http://thedataasylum.com/articles/how-rails-nginx-x-accel-redirect-work-together.html"/>
    <updated>2011-07-05T00:00:00+10:00</updated>
    <id>http://thedataasylum.com/articles/how-rails-nginx-x-accel-redirect-work-together</id>
    <content type="html"><![CDATA[<p><strong>TL;DR</strong> - To use X-Accel-Redirect to serve static files from e.g /mnt/filestorage using send_file, put this in your nginx server configuration.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>proxy_set_header  X-Accel-Mapping       /mnt/filestorage/=/private_files/;
</span><span class='line'>
</span><span class='line'>location /private_files/ {
</span><span class='line'>  internal;
</span><span class='line'>  alias   /mnt/filestorage/;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The need for X-Accel-Redirect (and it&#8217;s sibling X-Sendfile) comes from two distinct requirements</p>

<ul>
<li>The need to deliver large files.</li>
<li>The need for those files to not be available to the public.</li>
</ul>


<p>Here we are going to see how to set up X-Accel-Redirect and Rails. This is a bit complex so I&#8217;m going to run through a specific example of downloading a file. Along the way we&#8217;ll see the configuration, code and HTTP headers that are used. This assumes you already have Rails and Nginx installed and working.</p>

<p>1. Browser makes a request for a file</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># HTTP Headers
</span><span class='line'>GET /download/SecretSquirrel.zip HTTP/1.1</span></code></pre></td></tr></table></div></figure>


<p>2. Nginx receives this request. It adds on a header with configuration data that will be required by rails.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#Nginx configuration
</span><span class='line'>proxy_set_header   X-Accel-Mapping       /mnt/filestorage/=/private_files/;
</span><span class='line'>
</span><span class='line'># Example HTTP Headers with additional header added by nginx
</span><span class='line'>GET /download/SecretSquirrel.zip HTTP/1.1
</span><span class='line'>X-Accel-Mapping: /mnt/filestorage/=/private_files/</span></code></pre></td></tr></table></div></figure>


<p>3. Nginx passes the request onto Rails and it invokes the relevant controller.</p>

<p>4. The controller makes its authorization checks and calls send_file. Use the absolute path to the file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># controller code (e.g. app/controllers/downloads_controller.rb)
</span><span class='line'>send_file('/mnt/filestorage/SecretSquirrel.zip')</span></code></pre></td></tr></table></div></figure>


<p>5. Rails (<a href="http://rack.rubyforge.org/">Rack</a> to be precise) then decides what to with the file. We need to tell rails to use X-Accel-Redirect in its configuration as shown below. Instead of using the file as the body of the request, it will add a header to the response. It uses the X-Accel-Mapping that nginx added earlier to change the file path.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Rails configuration (e.g. config/environments/production.rb)
</span><span class='line'>config.action_dispatch.x_sendfile_header = 'X-Accel-Redirect'
</span><span class='line'>
</span><span class='line'># HTTP Response
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>X-Accel-Redirect: /private_files/SecretSquirrel.zip
</span><span class='line'>Content-Type: application/octet-stream
</span><span class='line'>Content-length: ...
</span><span class='line'>Content-Disposition: attachment; filename="SecretSquirrel.zip"
</span><span class='line'>&lt;empty body&gt;</span></code></pre></td></tr></table></div></figure>


<p>6. Nginx receives this header from rails and interprets it. It finds the location directive and reverses the changes to the path that rails made in step 5.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#Nginx configuration
</span><span class='line'>    location /private_files/ {
</span><span class='line'>    internal;
</span><span class='line'>        alias   /mnt/filestorage/;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'># HTTP Response
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Type: application/octet-stream
</span><span class='line'>Content-Length: ...
</span><span class='line'>Content-Disposition: attachment; filename="SecretSquirrel.zip"
</span><span class='line'>&lt;contents of /mnt/filestorage/SecretSquirrel.zip&gt;</span></code></pre></td></tr></table></div></figure>


<p>7. Browser receives the file as if it was a normal download.</p>

<p>Also, if you have compiled passenger into nginx, remember to <a href="http://thedataasylum.com/articles/adding-headers-to-requests-using-nginx-and-passenger.html">use passenger_set_cgi_param instead of proxy_set_header</a></p>

<p><em>Software Versions used</em></p>

<ul>
<li>Rails 3.0.7</li>
<li>Passenger 3.0.5</li>
<li>Nginx 0.8.54</li>
<li>on Ubuntu 10.04.2 LTS</li>
</ul>


<p><em>Resources</em></p>

<ul>
<li><a href="http://rack.rubyforge.org/doc/Rack/Sendfile.html">Rack::Sendfile documentation</a></li>
<li><a href="http://wiki.nginx.org/X-accel">Nginx X-Accel documemtation</a></li>
<li><a href="http://wiki.nginx.org/XSendfile">More documentation on Nginx&#8217;s X-Accel-Redirect</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding headers to requests using Nginx and Passenger]]></title>
    <link href="http://thedataasylum.com/articles/adding-headers-to-requests-using-nginx-and-passenger.html"/>
    <updated>2011-06-13T00:00:00+10:00</updated>
    <id>http://thedataasylum.com/articles/adding-headers-to-requests-using-nginx-and-passenger</id>
    <content type="html"><![CDATA[<p><strong>TL;DR</strong> If you have compiled Passenger into Nginx, use <code>passenger_set_cgi_param</code> instead of <code>proxy_set_header</code> to set HTTP headers required by the rails process.</p>

<p>There are two ways of using Passenger and Nginx together. The first is when the two are compiled into one daemon that creates many processes as required. The second is using Nginx as a proxy in front of Passenger/Apache/Nginx processes running either on the same machine or on a different server altogether.</p>

<p>When using Nginx as a proxy, it can be configured to add or redefine http headers in the request. This is done using the <code>proxy_set_header</code> directive.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>proxy_set_header X-Forwarded-For 127.0.0.1;</span></code></pre></td></tr></table></div></figure>


<p>If you have compiled Passenger into Nginx, the above configuration will have no effect. This is because the request is not considered to be proxied by Nginx. To have the same effect you need to use the <code>passenger_set_cgi_param</code> directive.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>passenger_set_cgi_param HTTP_X_FORWARDED_FOR 127.0.0.1;</span></code></pre></td></tr></table></div></figure>


<p>Notice that the header name is all upper case, and has <code>HTTP_</code> prefixed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Differences between PHP Arrays and Ruby Hashes]]></title>
    <link href="http://thedataasylum.com/articles/differences-between-php-arrays-and-ruby-hashes.html"/>
    <updated>2011-03-19T00:00:00+10:00</updated>
    <id>http://thedataasylum.com/articles/differences-between-php-arrays-and-ruby-hashes</id>
    <content type="html"><![CDATA[<p>We&#39;ve looked at the <a href="http://thedataasylum.com/articles/major-differences-between-php-and-ruby-arrays.html">differences between Ruby and PHP arrays</a> before. Now lets compare PHP arrays and Ruby hashes. They should be similar as all <a href="http://stackoverflow.com/questions/247467/how-are-associative-arrays-implemented-in-php" target="_blank">PHP arrays are implemented as hashes</a>. There is however a crucial difference that can trip you up if you are switching from one language to another.</p>


<h3>Referencing an index that hasn&#39;t been set is an error in PHP, but not in Ruby.</h3>

<p>In PHP, retrieving a value for an index that you haven&#39;t used is a warning. Although warnings can be turned off it is best practice to develop with them turned on.</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$a</span><span class="p">[</span><span class="s1">&#39;key1&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;value1&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$a</span><span class="p">[</span><span class="s1">&#39;key2&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;value2&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="nv">$a</span><span class="p">[</span><span class="s1">&#39;key5&#39;</span><span class="p">];</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">lang@virtualbox1:~/$ php hash.php</span>
</span><span class='line'><span class="cm">PHP Notice: Undefined index: key5 in /home/lang/hash.php on line 6</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<p>In Ruby you can set a default value for all keys that have not set a value. By default this value is nil.</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="s1">&#39;key1&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;value1&#39;</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="s1">&#39;key2&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;value2&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">a</span><span class="o">[</span><span class="s1">&#39;key5&#39;</span><span class="o">]</span>
</span><span class='line'><span class="cm">=begin</span>
</span><span class='line'><span class="cm">lang@virtualbox1:~/$ ruby hash.rb</span>
</span><span class='line'><span class="cm">nil</span>
</span><span class='line'><span class="cm">=end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Ruby hashes are unordered (up to version 1.8). PHP arrays have an internal order seperate from their index.</h3>

<p>When you loop through a PHP array, the values will be returned in the order they were added.</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$a</span><span class="p">[</span><span class="s1">&#39;key1&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;one&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$a</span><span class="p">[</span><span class="s1">&#39;key0&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;zero&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$a</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">print</span> <span class="nv">$value</span> <span class="o">.</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">lang@virtualbox1:~/$ php hash.php</span>
</span><span class='line'><span class="cm">one</span>
</span><span class='line'><span class="cm">zero</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<p>In Ruby 1.8 hashes are unordered, they could be retreived in any order that ruby decides is best. Ruby 1.9 changes this so that it works in the same way as the PHP example above.</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="s1">&#39;key1&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;one&#39;</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="s1">&#39;key0&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;zero&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">each_value</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="o">|</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="n">value</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="cm">=begin</span>
</span><span class='line'><span class="cm">lang@virtualbox1:~/$ ruby hash.rb</span>
</span><span class='line'><span class="cm">zero</span>
</span><span class='line'><span class="cm">one</span>
</span><span class='line'><span class="cm">=end</span>
</span></code></pre></td></tr></table></div></figure>




<p>Is there anything that has been missed? Add a comment below.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Major differences between PHP and Ruby Arrays]]></title>
    <link href="http://thedataasylum.com/articles/major-differences-between-php-and-ruby-arrays.html"/>
    <updated>2011-03-10T00:00:00+10:00</updated>
    <id>http://thedataasylum.com/articles/major-differences-between-php-and-ruby-arrays</id>
    <content type="html"><![CDATA[<p>PHP has a single array type, where as Ruby has Array and Hash, which covers the same functionality. In this article i&#39;ll go though the three major logical differences between PHPs array type and Rubys Array class. <a href="http://thedataasylum.com/article_225/differences-php-arrays-ruby-hashes.html">We compare PHP arrays and Ruby Hashes in separate post</a>.</p>


<p>Firstly,</p>


<h3>PHP arrays have an internal order separate from their index.</h3>

<p>Lets look at a simple example. In php the order you insert values into an array determines the order that php will return them using foreach.</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;one&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;zero&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$a</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">print</span> <span class="nv">$value</span> <span class="o">.</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">lang@virtualbox1:~/arrays$ php array.php</span>
</span><span class='line'><span class="cm">one</span>
</span><span class='line'><span class="cm">zero</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="o">&gt;?</span>
</span></code></pre></td></tr></table></div></figure>




<p>Ruby on the other hand uses the key or index of the array to determine the order, regardless of order in which the values are inserted.</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;one&#39;</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;zero&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="o">|</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="n">value</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="cm">=begin</span>
</span><span class='line'><span class="cm">lang@virtualbox1:~/arrays$ ruby array.rb</span>
</span><span class='line'><span class="cm">zero</span>
</span><span class='line'><span class="cm">one</span>
</span><span class='line'><span class="cm">=end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Secondly,</p>

<h3>Ruby arrays always start at 0 and end at the highest index. PHP arrays only contain the keys that have been entered.</h3>

<p>In the example below, PHP will output the two array values that are set.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;two&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$a</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;four&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$a</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">print</span> <span class="nv">$value</span> <span class="o">.</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">lang@virtualbox1:~/arrays$ php array.php</span>
</span><span class='line'><span class="cm">two</span>
</span><span class='line'><span class="cm">four</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<p>In the ruby example, not only are the two values output, but an attempt is made to get the value from every index between 0 and the highest index set.</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;two&#39;</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;four&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="o">|</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="n">value</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="cm">=begin</span>
</span><span class='line'><span class="cm">lang@virtualbox1:~/arrays$ ruby array.rb</span>
</span><span class='line'><span class="cm">nil</span>
</span><span class='line'><span class="cm">nil</span>
</span><span class='line'><span class="cm">two</span>
</span><span class='line'><span class="cm">nil</span>
</span><span class='line'><span class="cm">four</span>
</span><span class='line'><span class="cm">=end</span>
</span></code></pre></td></tr></table></div></figure>




<p>This leads to another difference&#8230;</p>


<h3>Referencing an array index that hasn&#39;t been set is an error in PHP, but not in Ruby.</h3>

<p>The following code produces a PHP notice. Notices are a low severity error, and are usually turned off on production servers. However it is considered good practice to develop with notices turned on.</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;two&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$a</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;four&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="nv">$a</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">lang@virtualbox1:~/arrays$ php array.php</span>
</span><span class='line'><span class="cm">PHP Notice: Undefined offset: 5 in /home/lang/arrays/array.php on line 6</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<p>Ruby on the other hand does not consider this an error. It will return the nil value which is &#39;kind of&#39; like PHPs null.</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;two&#39;</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;four&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">a</span><span class="o">[</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="cm">=begin</span>
</span><span class='line'><span class="cm">lang@virtualbox1:~/arrays$ ruby array3.rb</span>
</span><span class='line'><span class="cm">nil</span>
</span><span class='line'><span class="cm">=end</span>
</span></code></pre></td></tr></table></div></figure>




<p>So what are your experiences switching between PHP and Ruby. Let me know in the comments below.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[7 Habits of Highly Ineffective People]]></title>
    <link href="http://thedataasylum.com/articles/7-habits-of-highly-ineffective-people.html"/>
    <updated>2011-01-06T00:00:00+10:00</updated>
    <id>http://thedataasylum.com/articles/7-habits-of-highly-ineffective-people</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thedataasylum.com/images/posts/The_7_Habits_of_Highly_Effective_People.jpg" title="The 7 Habits of Highly Effective People Cover" ></p>

<p>
My Secret Santa decided to treat me to a copy of Stephen Covey&#8217;s <a href="http://en.wikipedia.org/wiki/The_Seven_Habits_of_Highly_Effective_People">The Seven Habits of Highly Effective People</a>. Presumably because I&#8217;m ineffective in some way, which is completely true. Here then is my list of how to be a highly ineffective person.</p>


<ol>
    <li><strong>Social Networking.</strong> Check Twitter/Facebook every 5 minutes. Someone might upload a photo of you at any minute. You must know ASAP.</li>
    <li><strong>MSN.</strong> Having personal conversations on MSN can sap anything from 10 minutes up to an hour or two from your day.</li>
    <li><strong>Hangovers.</strong> Nothing keeps you alert like having a late night the night before. Especially if you are a &quot;2 pint screamer&quot; like myself.</li>
    <li><strong>Wikiwalk.</strong> Do a Google search on how to open a file in ruby. An hour later your reading about the Boer War in South Africa. You have no idea how this happened.</li>
    <li><strong>News feeds.</strong> Keeping up with the world and what is happening in your industry is important. Reading every article from the 200 feeds you are subscribed too isn&#8217;t.</li>
    <li><strong>Coffee Time.</strong> Making a cup of tea/coffee is a great little stretch for you. To really be ineffective, make a cup for the rest of the office as well.</li>
    <li><strong>Unread books</strong>. Buying books and not reading them is a surefire way to feel smart. I currently have The Passionate Programmer, Linchpin and the 7 habits book waiting to be read/finished.</li>
</ol>


<p>Is there anything missing. Do you have a favourite time waster? Let everyone know with a comment.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The best feature of VIM not in IDE's]]></title>
    <link href="http://thedataasylum.com/articles/the-best-feature-of-vim-not-in-ides.html"/>
    <updated>2010-10-11T00:00:00+10:00</updated>
    <id>http://thedataasylum.com/articles/the-best-feature-of-vim-not-in-ides</id>
    <content type="html"><![CDATA[<h3>Insertion mode keyword completion</h3>

<p>Ctrl-P and Ctrl-N in insert mode to search through the text to try and complete whatever variable name you are typing. I&#8217;ve never seen this in any other IDE and I really miss it. Code completion in IDE&#8217;s just isn&#8217;t the same.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speak the truth]]></title>
    <link href="http://thedataasylum.com/articles/speak-the-truth.html"/>
    <updated>2010-09-06T00:00:00+10:00</updated>
    <id>http://thedataasylum.com/articles/speak-the-truth</id>
    <content type="html"><![CDATA[<p>Improper uses of Booleans causes headaches for people who are reviewing your code. Lets take a look at some good, and not so good uses.</p>

<h3>Don&#8217;t be negative</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">if $notLoggedIn then</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks simple and readable right? Wrong. It&#39;s one step away from being misused.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">if ! $notLoggedin then</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not not logged in. Double negatives are a gotcha in language and coding and should be avoided. Fortunately the solution is an easy one. Remove the negative prefix (such as not, doNot, dont) from the variable name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">if $loggedIn then</span>
</span><span class='line'>
</span><span class='line'><span class="x">if ! $loggedIn then</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Hide Literals</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">if $hidden == false then</span>
</span></code></pre></td></tr></table></div></figure>


<p>Is it really necessary to compare the variable to false? Imagine this conversation.</p>

<pre><code>You are at Subway and they ask you
'Would you like your sandwich toasted?'
Would you reply with
'Toasted equals false'
    Or
'Not Toasted'
</code></pre>

<p>Avoid comparing with a literal true or false. The correct way to express this is :-</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">if ! $hidden then</span>
</span></code></pre></td></tr></table></div></figure>


<h3>A Boolean Flag?</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">if $reportFlag then</span>
</span></code></pre></td></tr></table></div></figure>


<p>$reportFlag is a little vague. In this case it is determining if an object is included in a report. So if $reportFlag is true, does that mean that the object is included or excluded? If you have to ask yourself the question then you have already failed and need to rethink what this variable should be called.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">if $report then</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is okay as long we are using the word &#8216;report&#8217; as a verb. &#8216;If we report this then&#8217; is how you would read this. Some people may not be able to make that leap so if you want to be more precise you could make it :-</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">if $includeInReport then</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Summary</h3>

<p>So to sum up, these three things will go a long way to making your code readable.</p>

<ul>
    <li>Remove the negative prefix (such as not, doNot, dont) from variable names.</li>
    <li>Avoid comparing with a literal true or false.</li>
    <li>Avoid vague terms like flag for Boolean values.</li>
</ul>


<p>Consider these ideas when choosing</p>

<ul>
    <li>Variable names</li>
    <li>Object properties</li>
    <li>Database field names</li>
    <li>Method or function parameter names</li>
</ul>


<h3>Anything Else?</h3>

<p>Is there something i&#8217;ve missed? A hole you could drive a double-decker bus through? Leave a comment below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ctrl-A Delete]]></title>
    <link href="http://thedataasylum.com/articles/ctrl-a-delete.html"/>
    <updated>2010-08-04T00:00:00+10:00</updated>
    <id>http://thedataasylum.com/articles/ctrl-a-delete</id>
    <content type="html"><![CDATA[<p>Usually a last resort. Often the best thing to do.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switching from web to desktop application development]]></title>
    <link href="http://thedataasylum.com/articles/switching-from-web-to-desktop-application-development.html"/>
    <updated>2010-07-26T00:00:00+10:00</updated>
    <id>http://thedataasylum.com/articles/switching-from-web-to-desktop-application-development</id>
    <content type="html"><![CDATA[<p>Switching jobs and making a career change is a big challenge. New problem domains to learn, new working relationships to build, new brand of instant coffee to get used to. For a programmer one of the more interesting changes can be moving from working on web applications to desktop applications. Here are a few points that i&#39;ve picked up having made the plunge a few months ago.</p>


<ul>
<li><p><strong>Control of environment</strong>. As a web programmer you have a lot of control of the environment your application runs in. Browser issues aside, once a HTTP request hits your servers you have complete control over what happens next. A desktop application has little control over where it is being run, what software is installed with it etc.</p></li>
<li><p><strong>Managing performance</strong>. A desktop application performing poorly can be a nightmare to diagnose. The characteristics of the users machine and currently running processes are completly foreign. If your web app is running slowly you not only have the program available but intimate knowledge of the hardware and architecture it is running on. You can make tradeoffs on the servers that your users may not be willing to do for your desktop application.</p></li>
<li><p><strong>24/7 operations</strong>. Most web developers will not only have to create the application, but support it as well. These problems that occur on live systems are usually given high priority pushing more long term work to the back.</p></li>
</ul>


<p>I had no idea how narrow my knowledge was. I&#39;d be interested to hear your thoughts. Have you made the switch from web to desktop, or in the other direction?</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a static class variable in ruby]]></title>
    <link href="http://thedataasylum.com/articles/creating-a-static-class-variable-in-ruby.html"/>
    <updated>2010-06-08T00:00:00+10:00</updated>
    <id>http://thedataasylum.com/articles/creating-a-static-class-variable-in-ruby</id>
    <content type="html"><![CDATA[<p>One of the patterns I (over)use in php is having a class with only static variables and static functions. To do this in ruby isn&#8217;t as straight forward as it could be, so here is how to do it.</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">StaticKlass</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ruby class variables are prefixed with &#39;@@&#39; .</span>
</span><span class='line'>    <span class="vc">@@variable</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># If you want to provide getters and setters you cant use the attr_accessor</span>
</span><span class='line'>    <span class="c1"># keyword, you have to create them manually. By adding the class name to</span>
</span><span class='line'>    <span class="c1"># the method definition, we are indicating that this is a method on the</span>
</span><span class='line'>    <span class="c1"># class, not in instances of this class</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">StaticKlass</span><span class="o">.</span><span class="nf">variable</span><span class="o">=</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>        <span class="vc">@@variable</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># the getter is defined to return the class variable when called</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">StaticKlass</span><span class="o">.</span><span class="nf">variable</span>
</span><span class='line'>        <span class="k">return</span> <span class="vc">@@variable</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Widescreen Desktop]]></title>
    <link href="http://thedataasylum.com/articles/my-widescreen-desktop.html"/>
    <updated>2010-06-01T00:00:00+10:00</updated>
    <id>http://thedataasylum.com/articles/my-widescreen-desktop</id>
    <content type="html"><![CDATA[<p>This is how I organize my widescreen desktop.</p>


<p><img src="http://thedataasylum.com/images/posts/mydesktop-300x168.png" alt="My Desktop, with the taskbar on the left hand side." /></p>

<p>The main feature is moving the taskbar over to the left hand side. When editing code or reading a website I would rather have more space vertically. It is also easier to select a window when you have a lot open. The Quick Launch toolbar is more useful, because you can have a lot more shortcuts without taking away taskbar space.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WTF - Scheduled Reports]]></title>
    <link href="http://thedataasylum.com/articles/wtf-scheduled-reports.html"/>
    <updated>2010-05-25T00:00:00+10:00</updated>
    <id>http://thedataasylum.com/articles/wtf-scheduled-reports</id>
    <content type="html"><![CDATA[<p>Working on scheduled reporting systems, you expect to see the same concepts. What format wiil we send the report in? How will it be delivered? I opened the &ldquo;scheduled report&rdquo; table to see how this particular system had been implemented. I couldn&rsquo;t immediately find which column i was looking for. In fact the only one that looked like it might be useful was something called deliv_method.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>deliv_method
</span><span class='line'>	206
</span><span class='line'>	774
</span><span class='line'>	206
</span><span class='line'>	206</span></code></pre></td></tr></table></div></figure>

<p>Ok, so we&rsquo;ve got a numeric list of delivery methods. Nothing too unusual about that. I just need to find the list either in the database or codebase. But where do we store the format of the report? I worked my way through the report scheduler code until i found this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$delivMeth = ($row[&#39;DELIV_METHOD&#39;] &gt;&gt; 8);</span>
</span><span class='line'><span class="x">$myFormat = ($row[&#39;DELIV_METHOD&#39;] &amp; 0xFF);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Are those <a href="http://php.net/manual/en/language.operators.bitwise.php" target="_blank">bitwise operators</a>? And even a literal hexadecimal number? The only place i&rsquo;ve ever seen a bitwise operator is when setting the error reporting level. I&rsquo;ve looked at this a few times and am still not sure i correctly understand it.</p>
<p>The answer eventually revealed itself.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$a = array(</span>
</span><span class='line'><span class="x">	0x0104 =&gt; &#39;Email HTML&#39;,</span>
</span><span class='line'><span class="x">	0x0204 =&gt; &#39;Email HTML Attachment&#39;,</span>
</span><span class='line'><span class="x">	0x0284 =&gt; &#39;Email HTML Zipped attach&#39;,</span>
</span><span class='line'><span class="x">	0x0201 =&gt; &#39;Email PDF&#39;,</span>
</span><span class='line'><span class="x">	0x0203 =&gt; &#39;Email TSV delim&#39;,</span>
</span><span class='line'><span class="x">	0x0283 =&gt; &#39;Email TSV delim zipped&#39;,</span>
</span><span class='line'><span class="x">	0x0203 =&gt; &#39;Email CSV delim&#39;,</span>
</span><span class='line'><span class="x">	0x0283 =&gt; &#39;Email CSV delim zipped&#39;,</span>
</span><span class='line'><span class="x">	0x0304 =&gt; &#39;FTP HTML&#39;,</span>
</span><span class='line'><span class="x">	0x0301 =&gt; &#39;FTP PDF&#39;,</span>
</span><span class='line'><span class="x">	0x0303 =&gt; &#39;FTP TSV delim&#39;,</span>
</span><span class='line'><span class="x">	0x0303 =&gt; &#39;FTP CSV delim&#39;,</span>
</span><span class='line'><span class="x">	);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Pretty clever you have to admit! Unfortunately it can lead to same rather ugly code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">if ((($(&#39;#INPUT\\[DELIVERY_METHOD\\]&#39;).val() &amp; 0xFF00) &gt;&gt; 8) != 0x03){</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Hire a Senior PHP Programmer?]]></title>
    <link href="http://thedataasylum.com/articles/why-hire-a-senior-php-programmer.html"/>
    <updated>2010-05-17T00:00:00+10:00</updated>
    <id>http://thedataasylum.com/articles/why-hire-a-senior-php-programmer</id>
    <content type="html"><![CDATA[<p>One of the first questions I ask when attending an interview is why are you hiring a senior PHP programmer? It is a question born out of cynicism. If everything is going well in your organization why change things by hiring someone? But also the question is &#39;Why do you need someone with lots of experience&#39;. They are going to be more expensive so why are you spending the money?</p>
<p>In <a href="http://www.amazon.com/Smart-Gets-Things-Done-Technical/dp/1590598385/" target="_blank">Joel Spolsky&#39;s book</a> on hiring programmers, he states :-</p>
<blockquote>
	<p>The great software developers, indeed, the best in every field, are quite simply never on the market.</p>
</blockquote>
<p>Sitting on the other side of the fence, I believe that the opposite is also true. The great software <strong>jobs</strong> are quite simply never on the market. There are many reasons to hire a senior programmer. Let us have a realistic look at them from the point of view of the jobseeker.</p>
<ul>
	<li>
		<div>The business is growing and we have more paid projects then the current staff can handle.</div>
		<ul>
			<li>This is the most common answer, and sometimes it&#39;s not rubbish. It&#39;s one of the better answers but the problem for the jobseeker is there is no real way to disprove it. Also you have to ask why do you need more than a mid-level or even low level programmer.</li>
		</ul>
	</li>
	<li>
		<div>Our senior programmer quit, and we are filling in his position</div>
		<ul>
			<li>Why did he quit? Is he moving cities to look after his sick aunt? Or did he just quit because he didn&#39;t like the job? It is once again hard for the jobseeker to verify this. Even if they gave you permission to speak to the ex-employee, would you believe it if he told you it was the greatest job on earth? Perhaps asking how long his tenure was may offer an insight.</li>
		</ul>
	</li>
	<li>
		<div>We only hire experienced people</div>
		<ul>
			<li>If everyone is senior who makes decisions? Who does the boring crap? (Seriously there are often a lot of repetitive tasks that are perfect for a junior to cut his teeth on, and would drive a senior person insane with boredom). Who am I going to mentor?</li>
		</ul>
	</li>
	<li>
		<div>Our platform is a complete mess and we need senior people to decipher it</div>
		<ul>
			<li>While this is a cynical view I believe that there are quite a few positions where a senior position is required because of this very reason. It will not be stated explicitly or even understood by the people hiring, and can be a real surprise for employees walking in to a new position. Trying to tell if this is the case before hand is tricky. The sad thing is that this type of challenge could be attractive to a senior person. Give a technical person the opportunity to make something better and they (should) grab it with both hands.</li>
		</ul>
	</li>
</ul>
<p>What are the other reasons to hire a senior programmer? Get it off your chest and leave a comment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Help eliminate bad code]]></title>
    <link href="http://thedataasylum.com/articles/help-eliminate-bad-code.html"/>
    <updated>2010-01-27T00:00:00+10:00</updated>
    <id>http://thedataasylum.com/articles/help-eliminate-bad-code</id>
    <content type="html"><![CDATA[<p>The <a href="http://codeoffsets.com/">Bad Code Offsets</a> project is an attempt to get programmers to put money into open source software. We may not be able to change the bad code we have written. Instead we can buy an offset that goes towards creating more good code.</p>
<blockquote>
	<p>Bad code lives on well past the time we inflicted those bad lines into the global code base. Applications continue to live their lives serving businesses, consumers and the global community at large. Bad code weakens the utility delivered by these applications causing business loss, user dissatisfaction, accidents, disasters and, in general, sucks limited resources towards responding to the after effects of bad code rather than toward the common good.</p>
</blockquote>
<p>They have <a href="http://thedailywtf.com/Articles/Bad-Code-Offsets-Open-Web-Innovation.aspx">just made a $500 grant</a> to the GPSd project, which aims to shield developers from the <a href="http://esr.ibiblio.org/?p=801">idiosyncracies</a> of integrating each GPS device available.</p>
<p>How often do you use open source software. How often have you contributed, either by submitting code or donating money? My gut feeling is that at least 95% of developers haven&#39;t done either. The 10 USD I donated will be going to the Apache software foundation. The apache webserver has been at the base of nearly every project I&#39;ve worked on and will be for a long time to come.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2 points to remember when interviewing developers]]></title>
    <link href="http://thedataasylum.com/articles/2-points-to-remember-when-interviewing-developers.html"/>
    <updated>2010-01-20T00:00:00+10:00</updated>
    <id>http://thedataasylum.com/articles/2-points-to-remember-when-interviewing-developers</id>
    <content type="html"><![CDATA[<ul>
	<li><strong>Sell your company</strong>. Tell a story. Where you have come from and where you are going. Why the position is so important to continuing that story. What technical challenges are the company facing. Keep it interesting and relevant to the position. You want everyone who comes for an interview to want to work for you. Even if the person is not right for the job, word of mouth amongst potential employees is a great tool for getting people through the door.</li>
	<li><strong>Qualify the applicant</strong>. Ask hard questions and let them prove their knowledge. Most of the enjoyment you can receive from a job is through co-workers. One of the concerns a job seekers will have is the quality of their future co-workers. By showing that you are screening out lazy, boring and unqualified people, the person will feel more comfortable about taking the job. Instead of wondering if the company will be good enough for them, they will start to wonder if they are good enough for the company. It also puts a level of expectation on the applicant which is a good place to start the work relationship.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grepWin - Grep for windows]]></title>
    <link href="http://thedataasylum.com/articles/grepwin-grep-for-windows.html"/>
    <updated>2010-01-06T00:00:00+10:00</updated>
    <id>http://thedataasylum.com/articles/grepwin-grep-for-windows</id>
    <content type="html"><![CDATA[<p>
	<a href="http://www.gnu.org/software/grep/">grep</a> is an often used tool on linux. It&#8217;s job is very simple, to find a string (or regular expression) in a group of files.</p>
<p>
	<a href="http://tools.tortoisesvn.net/grepWin">grepWin</a> is a gui version and is a lifesaver if you have to use windows as part of your development environment. The best bits are</p>
<ul>
	<li>
		Integrates with windows explorer. Search any folder by right clicking on it.</li>
	<li>
		Results behave just like a windows explorer folder. Right click on the files to edit from the results panel.</li>
	<li>
		Regular expression support. A feature compared to windows built in search.</li>
	<li>
		Search and replace. The tool goes further than grep and will do a search and replace over many files.</li>
</ul>

<img src="http://thedataasylum.com/images/posts/grepwin-scaled.png" alt="grepWin Screenshot" />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to be a programmer - circa 2002]]></title>
    <link href="http://thedataasylum.com/articles/how-to-be-a-programmer-circa-2002.html"/>
    <updated>2009-12-30T00:00:00+10:00</updated>
    <id>http://thedataasylum.com/articles/how-to-be-a-programmer-circa-2002</id>
    <content type="html"><![CDATA[<p>While looking through some old files I found this gem. It&#39;s an essay written seven years ago by Robert L. Read called <a href="http://samizdat.mines.edu/howto/">&quot;How To Be a Programmer: A Short, Comprehensive, and Personal Summary&quot;</a>. It covers a what the writer feels are the most important skills to learn across beginner, intermediate and advanced skill levels.</p>


<p>I remember being heavily influenced by this as it appeared a short time after I first had a real job. seven years is a long time in technology and I was wondering if the advice in it held up. Here are a few excerpts.</p>


<blockquote><p>2.9 How to Deal with Intermittent Bugs
The intermittent bug has to obey the same laws of logic everything else does. What makes it hard is that it occurs only under unknown conditions. Try to record the circumstances under which it does occur, so that you can guess at what the variability really is. &#8230; Try, try, try to reproduce it. If you can&#39;t reproduce it, set a trap for it by building a logging system, a special one if you have to, that can log what you guess is what you need when it really occurs.</p></blockquote>

<p>When I first read this many years ago I was relieved. It&#39;s not just me that has these problems. I&#39;ve used this formula too many times to count.</p>


<blockquote><p>6.7 How to Know When to Apply Fancy Computer Science
There is a body of knowledge about algorithms, data structures, mathematics, and other gee-whiz stuff that most programmers know about but rarely use. In practice, this wonderful stuff is too complicated and generally unnecessary.</p></blockquote>

<p>It&#39;s the biggest contradiction in our industry that a lot of importance is placed on solutions to complicated problems when most of the time simple solutions to simple problems are needed (and more desirable).</p>


<blockquote><p>4.1 How to Stay Motivated
It is a wonderful and surprising fact that programmers are highly motivated by the desire to create artifacts that are beautiful, useful, or nifty. &#8230; There&#39;s a lot of money to be made doing ugly, stupid, and boring stuff; but in the end fun will make the most money for the company.</p></blockquote>

<p>I&#39;m not sure where I stand on this one. As much as I&#39;d like to believe that fun is always the way to go I&#39;m not sure that it will always pay the bills.</p>


<p>Overall it is still a relevant and important essay for any programmer at any level.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Glue code]]></title>
    <link href="http://thedataasylum.com/articles/glue-code.html"/>
    <updated>2009-12-23T00:00:00+10:00</updated>
    <id>http://thedataasylum.com/articles/glue-code</id>
    <content type="html"><![CDATA[<p>Glue is what holds your application together. Code needs to talk to databases, Javascript is calling your PHP functions using Ajax. When two systems, or different parts of the same system need to talk to each other, you end up with glue. It (hopefully) doesn&#8217;t have any business logic. It&#8217;s used or copied by at least a few different parts of your system, perhaps even in different projects in the same organisation.</p>

<p>Glue code holds things together. The only problem is that glue is not your application. Unless you&#39;re developing a <a href="http://framework.zend.com/">framework</a>, <a href="http://www.ubuntu.com/">operating system</a> or perhaps something that needs <a href="https://addons.mozilla.org/">plugins</a>, glue is not your strength. There are always exceptions but if you are writing glue, especially the same glue for the 3rd or 4th time, then you&#39;re not directly working on the application you are building.</p>

<p>Having said that, your project won&#39;t survive without glue. So how do you keep everything together?</p>

<ul>
    <li><strong>Recognise glue</strong>. The first step is to understand that you are now writing glue code and not working on business requirements. For example, say you are writing a script to process files that are uploaded to your server. Discovering the files is glue, the processing of then is specific to your application.</li>
    <li><strong>Standardise across your organisation</strong>. Glue may start out as a one off but as time moves on it will become apparent which pieces are worth time improving and which aren&#39;t.</li>
    <li><strong>Make it as simple to use as possible</strong>. It will need to be understood by a larger group of developers than your other code. Put that extra time into documentation and code beautification.</li>
    <li><strong>Make it as robust as possible</strong>. You don&#39;t want this getting in the way of your &#39;actual&#39; work.</li>
    <li><strong>Use 3rd party glue</strong>. Someone has nearly always been before you. Wiring your PHP and JS together with AJAX? It&#39;s <a href="http://www.modernmethod.com/sajax/">been</a> <a href="http://phplivex.com/">done</a>. Creating a DB access class? <a href="http://framework.zend.com/manual/en/zend.db.table.html">Been</a> there, <a href="http://www.phpactiverecord.org/">done</a> <a href="http://propel.phpdb.org/">that</a>. If you think you can do better your probably wrong. You may write better code, but you probably won&#39;t document or test it as thoroughly as an open source project has already been.</li>
</ul>


<p>In conclusion, you want to keep glue simple and straight forward. Recognise what is and isn&#39;t glue in your application. Share the glue you have with every one in your team, and if your brave, the outside world.</p>


<p><em>The idea of <a href="http://www.faqs.org/docs/artu/ch04s03.html">glue</a> is described in Eric Raymond&#39;s excellent book <a href="http://www.faqs.org/docs/artu/">The art of unix programming</a>.</em></p>

]]></content>
  </entry>
  
</feed>
